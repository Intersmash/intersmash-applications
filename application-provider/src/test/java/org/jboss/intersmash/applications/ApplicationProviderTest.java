/*
 * Copyright (C) 2025 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jboss.intersmash.applications;

import java.nio.file.Files;
import java.nio.file.Path;
import org.jboss.intersmash.applications.jupiter.annotations.RequiresWildflyMicroProfileSupport;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/**
 * Verify {@link ApplicationProvider} is able to expose application
 * deliverables, e.g.: WAR deployments, provisioned WildFly/JBoss EAP server
 * directory, etc.
 */
class ApplicationProviderTest {

	/**
	 * Verify that a provisioned server generated by the WidFly/JBoss EAP Maven plugin
	 * for the {@code wildfly-microprofile-reactive-messaging-kafka} application
	 * exists.
	 */
	@Test
	@RequiresWildflyMicroProfileSupport
	void wildflyMicroprofileReactiveMessagingKafkaProvisionedServer_exists() {
		Path appPath = null;
		try {
			appPath = ApplicationProvider.wildflyMicroprofileReactiveMessagingKafkaProvisionedServerPath();
		} catch (Throwable e) {
			Assertions.fail(e);
		}
		assertPathExist(appPath);
	}

	/**
	 * Verify that a provisioned server generated by the WidFly/JBoss EAP 8.x Maven plugin
	 * for the {@code wildfly-elytron-oidc-client-keycloak} application
	 * exists.
	 */
	@Test
	void wildflyElytronOidcClientKeycloakProvisionedServer_exists() {
		Path appPath = null;
		try {
			appPath = ApplicationProvider.wildflyElytronOidcClientKeycloakProvisionedServerPath();
		} catch (Throwable e) {
			Assertions.fail(e);
		}
		assertPathExist(appPath);
	}

	/**
	 * Verify that a provisioned server generated by the WidFly/JBoss EAP 8.x Maven plugin
	 * for the {@code wildfly-web-cache-offload-infinispan} application
	 * exists.
	 */
	@Test
	void wildflyWebCacheOffloadInfinispanProvisionedServer_exists() {
		Path appPath = null;
		try {
			appPath = ApplicationProvider.wildflyWebCacheOffloadInfinispanProvisionedServerPath();
		} catch (Throwable e) {
			Assertions.fail(e);
		}
		assertPathExist(appPath);
	}

	/**
	 * Verify that a provisioned server generated by the WidFly/JBoss EAP 8.x Maven plugin
	 * for the {@code wildfly-distributed-sessions-infinispan} application
	 * exists.
	 */
	@Test
	void wildflyDistributedSessionsInfinispanProvisionedServer_exists() {
		Path appPath = null;
		try {
			appPath = ApplicationProvider.wildflyDistributedSessionsInfinispanProvisionedServerPath();
		} catch (Throwable e) {
			Assertions.fail(e);
		}
		assertPathExist(appPath);
	}

	/**
	 * Verify that a provisioned server generated by the WidFly/JBoss EAP 8.x Maven plugin
	 * for the {@code wildfly-activemq-artemis-ssl} application
	 * exists.
	 */
	@Test
	void wildflyActiveMQArtemisSslProvisionedServerPath_exists() {
		Path appPath = null;
		try {
			appPath = ApplicationProvider.wildflyActiveMQArtemisSslProvisionedServerPath();
		} catch (Throwable e) {
			Assertions.fail(e);
		}
		assertPathExist(appPath);
	}

	/**
	 * Verify that a provisioned server generated by the WidFly/JBoss EAP 8.x Maven plugin
	 * for the {@code wildfly-keycloak-saml-adapter} application
	 * exists.
	 */
	@Test
	void wildflyKeycloakSamlAdapterProvisionedServerPath_exists() {
		Path appPath = null;
		try {
			appPath = ApplicationProvider.wildflyKeycloakSamlAdapterProvisionedServerPath();
		} catch (Throwable e) {
			Assertions.fail(e);
		}
		assertPathExist(appPath);
	}

	/**
	 * Verify that a WAR deployment for the
	 * {@code wildfly-microprofile-reactive-messaging-kafka} application exists.
	 */
	@Test
	@RequiresWildflyMicroProfileSupport
	void wildflyMicroprofileReactiveMessagingKafkaDeployment_exists() {
		Path appPath = null;
		try {
			appPath = ApplicationProvider.wildflyMicroprofileReactiveMessagingKafkaDeploymentPath();
		} catch (Throwable e) {
			Assertions.fail(e);
		}
		assertPathExist(appPath);
	}

	/**
	 * Verify that a WAR deployment for the
	 * {@code wildfly-elytron-oidc-client-keycloak} application exists.
	 */
	@Test
	void wildflyElytronOidcClientKeycloakDeployment_exists() {
		Path appPath = null;
		try {
			appPath = ApplicationProvider.wildflyElytronOidcClientKeycloakDeploymentPath();
		} catch (Throwable e) {
			Assertions.fail(e);
		}
		assertPathExist(appPath);
	}

	/**
	 * Verify that a WAR deployment for the
	 * {@code wildfly-web-cache-offload-infinispan} application exists.
	 */
	@Test
	void wildflyWebCacheOffloadInfinispanDeployment_exists() {
		Path appPath = null;
		try {
			appPath = ApplicationProvider.wildflyWebCacheOffloadInfinispanDeploymentPath();
		} catch (Throwable e) {
			Assertions.fail(e);
		}
		assertPathExist(appPath);
	}

	/**
	 * Verify that a WAR deployment for the
	 * {@code wildfly-distributed-sessions-infinispan} application exists.
	 */
	@Test
	void wildflyDistributedSessionsInfinispanDeployment_exists() {
		Path appPath = null;
		try {
			appPath = ApplicationProvider.wildflyDistributedSessionsInfinispanDeploymentPath();
		} catch (Throwable e) {
			Assertions.fail(e);
		}
		assertPathExist(appPath);
	}

	/**
	 * Verify that a WAR deployment for the
	 * {@code wildfly-activemq-artemis-ssl} application exists.
	 */
	@Test
	void wildflyActiveMQArtemisSslDeploymentPath_exists() {
		Path appPath = null;
		try {
			appPath = ApplicationProvider.wildflyActiveMQArtemisSslDeploymentPath();
		} catch (Throwable e) {
			Assertions.fail(e);
		}
		assertPathExist(appPath);
	}

	/**
	 * Verify that a WAR deployment for the
	 * {@code wildfly-keycloak-saml-adapter} application exists.
	 */
	@Test
	void wildflyKeycloakSamlAdapterDeploymentPath_exists() {
		Path appPath = null;
		try {
			appPath = ApplicationProvider.wildflyKeycloakSamlAdapterDeploymentPath();
		} catch (Throwable e) {
			Assertions.fail(e);
		}
		assertPathExist(appPath);
	}

	private static void assertPathExist(final Path path) {
		Assertions.assertNotNull(path);
		Assertions.assertTrue(Files.exists(path));
	}
}
